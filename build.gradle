/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.3/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'

// Global variables
def path = 'https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/'
def mainurl = path + 'aws-template-resource-type-ref.html'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:23.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    
    // Compilation libraries
    // Generate JSON representation
    implementation 'com.google.code.gson:gson:2.8.5'
    
    // Generate YAML representation
    compile 'com.fasterxml.jackson.core:jackson-core:2.8.6'
	compile 'com.fasterxml.jackson.core:jackson-databind:2.8.6'
	compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.8.6'
	
	// HTML Parser
	compile group: 'org.jsoup', name: 'jsoup', version: '1.11.3'
    
}

// Task to generate the source classes needed to map all sort of AWS resources
// To run "gradle generateAwsSources"
task generateAwsSources(type:Exec) {
		group 'Generate Source Libraries'
    	description 'Task to generate the source classes needed to map all sort of AWS resources'
    
        println '== Generating source files... =='
        workingDir '.'
        // commandLine '/usr/bin/curl', '-s', mainurl
        
        // curl -s https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html | hxselect .highlights | hxselect a > data
        commandLine "/bin/bash", "-c", "/usr/bin/curl -s " + mainurl + " | hxselect .highlights | hxselect -s '\n' a"
        
        standardOutput = new ByteArrayOutputStream()
        doLast {
			println '== Getting Links =='
		    
		    // Create a tempLinks folder to store all temporary doc files
		    project.file('tempLinks').mkdirs()
		    
		    // Create a temp file to store temporary all links
		    def tempFileVar = new File("$projectDir/tempLinks/allLinks.txt")
		    tempFileVar.text = standardOutput
    		
    		// Read line by line and call a subtask createClasses. It creates a file for each and saves html content
		    tempFileVar.eachLine { String line ->
		    	if(line.size() > 0 && line.indexOf('href=') > 0){
		    		def linkValue = line.substring(line.indexOf('href=')+6, line.indexOf('">'))
		    		if(line.size() > 0 && line.indexOf('">')+2 > 0 && line.indexOf('</a>') > 0){
		    			//def docFilename = line.substring(line.indexOf('">')+2, line.indexOf('</a>'))
			    		//docFilename = docFilename.replaceAll('AWS', '');
			    		//docFilename = docFilename.replaceAll('::', '');
			    		//docFilename = "$projectDir/tempLinks/" + docFilename;
						
						// Get html documentation
						def subProc = ""
						subProc  = "/usr/local/bin/wget -q -P $projectDir/tempLinks/ ${path}${linkValue}".execute();
		    			subProc.waitFor();
		    			println "Downloading... ${linkValue}"
		    			
		    			// Create java class
		    			// println "Creating file -> ${docFilename}"
		    			// def docFile = new File(docFilename)
		    			// docFile.text = proc.in.text
		    		}
		    	}
			}

		    println '== Done =='
		}
}

// NOTES...
// REMEMBER
// git rm -r --cached File-or-FolderName
// git commit -m "Removed folder from repository"
// git push origin master


// TODO Documentation TASK
// Create AsciiDoctor documentation from markdown source file
// Create README.md file from Java lib with documentation links, etc...